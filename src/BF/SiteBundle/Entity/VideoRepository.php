<?php

namespace BF\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * VideoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VideoRepository extends \Doctrine\ORM\EntityRepository
{
	public function checkChallenge($user, $challenge)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $user)
	     ->andWhere('v.challenge = :challenge')
	       ->setParameter('challenge', $challenge)
	     ->orderBy('v.date', 'DESC')
	     ->setMaxResults(1)
	  	;

	  return $qb
	    ->getQuery()
	    ->getOneOrNullResult()
	  ;
	}
	public function highestVideo($user, $challenge)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $user)
	     ->andWhere('v.challenge = :challenge')
	       ->setParameter('challenge', $challenge)
	     ->orderBy('v.score', 'DESC')
	     ->setMaxResults(1)
	  	;

	  return $qb
	    ->getQuery()
	    ->getOneOrNullResult()
	  ;
	}
	public function secondVideo($user, $challenge)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $user)
	     ->andWhere('v.challenge = :challenge')
	       ->setParameter('challenge', $challenge)
	     ->orderBy('v.score', 'DESC')
	     ->addOrderBy('v.date', 'DESC')
	     ->setMaxResults(1)
	     ->setFirstResult(1)
	  	;

	  return $qb
	    ->getQuery()
	    ->getOneOrNullResult()
	  ;
	}
	public function duelHostVideo($host, $duel)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $host)
	     ->andWhere('v.duel = :duel')
	       ->setParameter('duel', $duel)
	  	;

	  return $qb
	    ->getQuery()
	    ->getOneOrNullResult()
	  ;
	}
	public function duelGuestVideo($guest, $duel)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $guest)
	     ->andWhere('v.duel = :duel')
	       ->setParameter('duel', $duel)
	  	;

	  return $qb
	    ->getQuery()
	    ->getOneOrNullResult()
	  ;
	}
	public function videoBefore($user, $challenge)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $user)
	     ->andWhere('v.challenge = :challenge')
	       ->setParameter('challenge', $challenge)
	     ->orderBy('v.score', 'DESC')
	     ->setFirstResult(1)
	     ->setMaxResults(1)
	  	;

	  return $qb
	    ->getQuery()
	    ->getOneOrNullResult()
	  ;
	}
	public function lastVideo($user)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $user)
	     ->andWhere('v.type = :challenge')
	       ->setParameter('challenge', 'challenge')
	     ->orderBy('v.date', 'DESC')
	     ->setMaxResults(1)
	    ;

	  return $qb
	    ->getQuery()
	    ->getOneOrNullResult()
	  ;
	}
	public function listChallenges($user)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $user)
	     ->andWhere('v.type = :challenge')
	       ->setParameter('challenge', 'challenge')
	     ->orderBy('v.challenge', 'DESC')
	     ->addOrderBy('v.repetitions','DESC')
	  ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function listVideos($user)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $user)
	     ->andWhere('v.type = :challenge OR v.type = :freestyle')
	       ->setParameter('challenge', 'challenge')
	       ->setParameter('freestyle', 'freestyle')
	     ->orderBy('v.date', 'DESC')
	  ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function randomVideos()
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->Where('v.type = :challenge OR v.type = :freestyle')
	       ->setParameter('challenge', 'challenge')
	       ->setParameter('freestyle', 'freestyle')
	     ->orderBy('v.date', 'DESC')
	  ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function listHomeVideos($user)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $user)
	  	->andWhere('v.type = :challenge OR v.type = :freestyle')
	       ->setParameter('challenge', 'challenge')
	       ->setParameter('freestyle', 'freestyle')
	     ->orderBy('v.date', 'DESC')
	     ->setMaxResults(10)
	    ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function listFreestyleVideos()
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->Where('v.type = :freestyle')
	       ->setParameter('freestyle', 'freestyle')
	     ->orderBy('v.date', 'DESC')
	     ->setMaxResults(4)
	    ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function latestVideos()
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->Where('v.type = :challenge OR v.type = :freestyle')
	       ->setParameter('challenge', 'challenge')
	       ->setParameter('freestyle', 'freestyle')
	     ->orderBy('v.date', 'DESC')
	     ->setMaxResults(8)
	    ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function latestFollowingVideos($user)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.user = :user')
	       ->setParameter('user', $user)
	     ->andWhere('v.type = :challenge OR v.type = :freestyle')
	       ->setParameter('challenge', 'challenge')
	       ->setParameter('freestyle', 'freestyle')
	     ->orderBy('v.date', 'DESC')
	     ->setMaxResults(4)
	  ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function checkCode($code)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->where('v.code = :code')
	       ->setParameter('code', $code)
	     ->setMaxResults(1)
	  	;

	  return $qb
	    ->getQuery()
	    ->getOneOrNullResult()
	  ;
	}
	public function lastestFreestyleVideos()
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->Where('v.type = :freestyle')
	       ->setParameter('freestyle', 'freestyle')
	     ->orderBy('v.date', 'DESC')
	     ->setMaxResults(8)
	    ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function latestVideosPage()
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->Where('v.type = :challenge OR v.type = :freestyle')
	       ->setParameter('challenge', 'challenge')
	       ->setParameter('freestyle', 'freestyle')
	     ->orderBy('v.date', 'DESC')
	     ->setMaxResults(16)
	    ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function videoWeek($date)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->Where('v.date > :date')
	       ->setParameter('date', $date)
	    ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function videoForChallenge($challenge, $user)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->Where('v.user = :user AND v.challenge = :challenge')
	  	   ->setParameter('challenge', $challenge)
	       ->setParameter('user', $user)
	      ->orderBy('v.score', 'DESC')
	       
	    ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function listUserFreestyleVideos($user)
	{
	  $qb = $this->createQueryBuilder('v');

	  $qb->Where('v.type = :freestyle AND v.user = :user')
	       ->setParameter('freestyle', 'freestyle')
	       ->setParameter('user', $user)
	     ->orderBy('v.date', 'DESC')
	    ;

	  return $qb
	    ->getQuery()
	    ->getResult()
	  ;
	}
	public function lowerRepetitionsVideos($challenge, $repetitions)
	{
		$qb = $this->createQueryBuilder('v');

		$qb->Where('v.challenge = :challenge AND v.repetitions < :repetitions')
		    ->setParameter('challenge', $challenge)
		    ->setParameter('repetitions', $repetitions)
		    ->orderBy('v.date', 'DESC')
		;

		return $qb
			->getQuery()
		    ->getResult()
		;
	}
	public function allVideos($user)
	{
		$qb = $this->createQueryBuilder('v');

		$qb->Where('v.type = :type AND v.user = :user')
		    ->setParameter('type', 'challenge')
		    ->setParameter('user', $user)
		    ->orderBy('v.challenge', 'DESC')
		    ->addorderBy('v.repetitions', 'DESC')
		;

		return $qb
			->getQuery()
		    ->getResult()
		;
	}
}

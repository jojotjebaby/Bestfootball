<?php

namespace BF\SiteBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * Duel
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="BF\SiteBundle\Entity\DuelRepository")
 */
class Duel
{
    /**
    * @ORM\ManyToMany(targetEntity="BF\UserBundle\Entity\User", inversedBy="duels")
    */
    private $users;

    /**
    * @ORM\ManyToOne(targetEntity="BF\SiteBundle\Entity\Challenge", inversedBy="duels")
    * @ORM\JoinColumn(nullable=false)
    */
    private $challenge;

    /**
    * @ORM\OneToMany(targetEntity="BF\SiteBundle\Entity\Video", mappedBy="duel")
    */
    private $videos; // Notez le « s », une annonce est liée à plusieurs candidatures

    /**
    * @ORM\OneToMany(targetEntity="BF\SiteBundle\Entity\Notification", mappedBy="duel")
    */
    private $notifications; // Notez le « s », une annonce est liée à plusieurs candidatures

    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="begin_date", type="datetime")
     */
    private $beginDate;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="end_date", type="datetime")
     */
    private $endDate;

    /**
     * @var boolean
     *
     * @ORM\Column(name="accepted", type="boolean")
     */
    private $accepted;


    /**
     * @var boolean
     *
     * @ORM\Column(name="host_completed", type="boolean")
     */
    private $hostCompleted;

    /**
     * @var boolean
     *
     * @ORM\Column(name="guest_completed", type="boolean")
     */
    private $guestCompleted;

    /**
     * @var boolean
     *
     * @ORM\Column(name="completed", type="boolean")
     */
    private $completed;



    /**
     * @ORM\ManyToOne(targetEntity="BF\UserBundle\Entity\User")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="host", referencedColumnName="id",nullable=false)
     * })
     */
    private $host;

    /**
     * @ORM\ManyToOne(targetEntity="BF\UserBundle\Entity\User")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="guest", referencedColumnName="id",nullable=false)
     * })
     */
    private $guest;

    /**
     * @ORM\ManyToOne(targetEntity="BF\UserBundle\Entity\User")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="winner", referencedColumnName="id")
     * })
     */
    private $winner;

    /**
     * @var string
     *
     * @ORM\Column(name="type", type="string", length=255,nullable=false)
     */
    private $type;

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set beginDate
     *
     * @param \DateTime $beginDate
     *
     * @return Duel
     */
    public function setBeginDate($beginDate)
    {
        $this->beginDate = $beginDate;

        return $this;
    }

    /**
     * Get beginDate
     *
     * @return \DateTime
     */
    public function getBeginDate()
    {
        return $this->beginDate;
    }

    /**
     * Set endDate
     *
     * @param \DateTime $endDate
     *
     * @return Duel
     */
    public function setEndDate($endDate)
    {
        $this->endDate = $endDate;

        return $this;
    }

    /**
     * Get endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->endDate;
    }

    /**
     * Set accepted
     *
     * @param boolean $accepted
     *
     * @return Duel
     */
    public function setAccepted($accepted)
    {
        $this->accepted = $accepted;

        return $this;
    }

    /**
     * Get accepted
     *
     * @return boolean
     */
    public function getAccepted()
    {
        return $this->accepted;
    }

    /**
     * Set completed
     *
     * @param boolean $completed
     *
     * @return Duel
     */
    public function setCompleted($completed)
    {
        $this->completed = $completed;

        return $this;
    }

    /**
     * Get completed
     *
     * @return boolean
     */
    public function getCompleted()
    {
        return $this->completed;
    }

    /**
     * Set hostCompleted
     *
     * @param boolean $hostCompleted
     *
     * @return Duel
     */
    public function setHostCompleted($hostCompleted)
    {
        $this->hostCompleted = $hostCompleted;

        return $this;
    }

    /**
     * Get hostCompleted
     *
     * @return boolean
     */
    public function getHostCompleted()
    {
        return $this->hostCompleted;
    }

    /**
     * Set guestCompleted
     *
     * @param boolean $guestCompleted
     *
     * @return Duel
     */
    public function setGuestCompleted($guestCompleted)
    {
        $this->guestCompleted = $guestCompleted;

        return $this;
    }

    /**
     * Get guestCompleted
     *
     * @return boolean
     */
    public function getGuestCompleted()
    {
        return $this->guestCompleted;
    }

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->users = new \Doctrine\Common\Collections\ArrayCollection();
        $this->videos = new \Doctrine\Common\Collections\ArrayCollection();
        $this->notifications = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add user
     *
     * @param \BF\UserBundle\Entity\User $user
     *
     * @return Duel
     */
    public function addUser(\BF\UserBundle\Entity\User $user)
    {
        $this->users[] = $user;

        return $this;
    }

    /**
     * Remove user
     *
     * @param \BF\UserBundle\Entity\User $user
     */
    public function removeUser(\BF\UserBundle\Entity\User $user)
    {
        $this->users->removeElement($user);
    }

    /**
     * Get users
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUsers()
    {
        return $this->users;
    }

    /**
     * Set challenge
     *
     * @param \BF\SiteBundle\Entity\Challenge $challenge
     *
     * @return Duel
     */
    public function setChallenge(\BF\SiteBundle\Entity\Challenge $challenge)
    {
        $this->challenge = $challenge;

        return $this;
    }

    /**
     * Get challenge
     *
     * @return \BF\SiteBundle\Entity\Challenge
     */
    public function getChallenge()
    {
        return $this->challenge;
    }

    /**
     * Add video
     *
     * @param \BF\SiteBundle\Entity\Video $video
     *
     * @return Duel
     */
    public function addVideo(\BF\SiteBundle\Entity\Video $video)
    {
        $this->videos[] = $video;

        return $this;
    }

    /**
     * Remove video
     *
     * @param \BF\SiteBundle\Entity\Video $video
     */
    public function removeVideo(\BF\SiteBundle\Entity\Video $video)
    {
        $this->videos->removeElement($video);
    }

    /**
     * Get videos
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getVideos()
    {
        return $this->videos;
    }

    /**
     * Add notification
     *
     * @param \BF\SiteBundle\Entity\Notification $notification
     *
     * @return Duel
     */
    public function addNotification(\BF\SiteBundle\Entity\Notification $notification)
    {
        $this->notifications[] = $notification;

        return $this;
    }

    /**
     * Remove notification
     *
     * @param \BF\SiteBundle\Entity\Notification $notification
     */
    public function removeNotification(\BF\SiteBundle\Entity\Notification $notification)
    {
        $this->notifications->removeElement($notification);
    }

    /**
     * Get notifications
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getNotifications()
    {
        return $this->notifications;
    }

    /**
     * Set type
     *
     * @param string $type
     *
     * @return Duel
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Get type
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set winner
     *
     * @param \BF\UserBundle\Entity\User $winner
     *
     * @return Duel
     */
    public function setWinner(\BF\UserBundle\Entity\User $winner = null)
    {
        $this->winner = $winner;

        return $this;
    }

    /**
     * Get winner
     *
     * @return \BF\UserBundle\Entity\User
     */
    public function getWinner()
    {
        return $this->winner;
    }
}
